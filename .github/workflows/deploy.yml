
name: Build and Deploy to OCI Functions

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Setup Python and Install OCI CLI
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - run: pip install oci-cli

    - name: 3. Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo -n "${{ secrets.OCI_PRIVATE_KEY }}" | base64 --decode > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ vars.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config

    - name: 4. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 5. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 6. Set Image Tag Environment Variable
      run: |
        # This path is lowercase to satisfy the Docker client.
        # The OCI backend will correctly map 'rag-project' to your 'RAG-Project' compartment.
        IMAGE_TAG="${{ vars.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/rag-project/rag-app/rag-ingestor:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV

    - name: 7. Build and Push with Raw Docker Commands (Diagnostic)
      run: |
        echo "Building image with tag: ${{ env.FULL_IMAGE_NAME }}"
        # We must specify the platform to ensure an AMD64 build
        docker build --platform linux/amd64 -t "${{ env.FULL_IMAGE_NAME }}" .
        
        echo "Pushing image to OCIR..."
        # This command will fail loudly if there is any issue
        docker push "${{ env.FULL_IMAGE_NAME }}"
        
        echo "âœ… Image push successful!"
        
    - name: 8. Create or Update OCI Function
      run: |
        # This requires the OCI_FN_APP_OCID secret to be set in your GitHub repository.
        FUNCTION_OCID=$(oci fn function list --application-id ${{ secrets.OCI_FN_APP_OCID }} --display-name rag-ingestor --query "data[0].id" --raw-output || true)
        
        if [ -z "$FUNCTION_OCID" ]; then
          echo "Function 'rag-ingestor' not found. Creating it..."
          oci fn function create \
            --application-id ${{ secrets.OCI_FN_APP_OCID }} \
            --display-name rag-ingestor \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --memory-in-mbs 1024 \
            --timeout-in-seconds 120
        else
          echo "Function 'rag-ingestor' found. Updating it..."
          oci fn function update \
            --function-id "$FUNCTION_OCID" \
            --image "${{ env.FULL_IMAGE_NAME }}"
        fi