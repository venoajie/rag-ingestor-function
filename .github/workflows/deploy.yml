
name: 'Deploy Application Code'

on:
  push:
    branches:
      - main

env:
  APP_NAME: "rag-app"
  FUNCTION_NAME: "rag-ingestor"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Configure OCI CLI
      run: |
        pip install oci-cli==3.40.0
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: 3. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 4. Set Image Tag Environment Variable
      run: |
        REPO_NAME=$(echo "${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${REPO_NAME}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV

    - name: 5. Build and Push Docker Image
      run: |
        docker build -t "${{ env.FULL_IMAGE_NAME }}" .
        docker push "${{ env.FULL_IMAGE_NAME }}"

    - name: 6. Update OCI Function with New Image
      env:
        DB_SECRET_OCID: ${{ secrets.DB_SECRET_OCID }}
        OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
        
      run: |
        # --- Verification Step ---
        echo "Verifying OCI CLI path and version for this step..."
        which oci
        oci --version

        echo "Looking up Application OCID for '${{ env.APP_NAME }}'..."
        APP_OCID=$($HOME/.local/bin/oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output || true)
        
        if [ -z "$APP_OCID" ] || [ "$APP_OCID" == "None" ]; then
          echo "FATAL: Could not retrieve Application OCID for '${{ env.APP_NAME }}'." >&2
          exit 1
        fi

        echo "Looking for existing function '${{ env.FUNCTION_NAME }}'..."
        FUNCTION_OCID=$($HOME/.local/bin/oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" --raw-output || true)
        
        if [ -z "$FUNCTION_OCID" ] || [ "$FUNCTION_OCID" == "None" ]; then
          echo "FATAL: Function '${{ env.FUNCTION_NAME }}' not found. Run the 'Provision Function' workflow manually first." >&2
          exit 1
        fi

        echo "Updating function $FUNCTION_OCID with new image and configuration..."
        
        sudo apt-get update && sudo apt-get install -y jq

        JSON_CONFIG=$(jq -n \
          --arg db_secret "$DB_SECRET_OCID" \
          --arg namespace "$OCI_NAMESPACE" \
          '{
            "DB_SECRET_OCID": $db_secret,
            "OCI_NAMESPACE": $namespace
          }')

        # --- FIX: Use the absolute path to the newly installed OCI CLI ---
        $HOME/.local/bin/oci fn function update \
          --function-id "$FUNCTION_OCID" \
          --image "${{ env.FULL_IMAGE_NAME }}" \
          --config "$JSON_CONFIG" \
          --auth-provider "resource_principal" \
          --force

        echo "âœ… Application update successful!"