
name: Build and Deploy to OCI Functions

on:
  push:
    branches:
      - main  # Or whatever your main branch is called

jobs:
  deploy:
    runs-on: ubuntu-latest # This is a native AMD64 machine

    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 3. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 4. Parse func.yaml and set environment variables
      id: parse_func
      run: |
        FUNCTION_NAME=$(grep '^name:' func.yaml | awk '{print $2}')
        FUNCTION_VERSION=$(grep '^version:' func.yaml | awk '{print $2}')
        APP_NAME="rag-app" # Set your app name here
        
        echo "FUNCTION_NAME=${FUNCTION_NAME}" >> $GITHUB_ENV
        echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
        echo "FULL_IMAGE_NAME=${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/${APP_NAME}/${FUNCTION_NAME}:${FUNCTION_VERSION}" >> $GITHUB_ENV

    - name: 5. Build and push Docker image (Native AMD64)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.FULL_IMAGE_NAME }}
        # No 'platform' flag needed, as we are building natively.

    # --- CORRECTED FN CLI INSTALLATION ---
    - name: 6. Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21' # Use a version compatible with fn CLI

    - name: 7. Build Fn CLI from source
      run: |
        echo "Cloning fn CLI repository..."
        git clone https://github.com/fnproject/cli.git
        cd cli
        echo "Building fn CLI..."
        make build
        echo "Moving fn binary to /usr/local/bin..."
        sudo mv fn /usr/local/bin/
        echo "Verifying fn installation..."
        fn version

    - name: 8. Configure Fn CLI Context
      run: |
        fn create context oci-prod --provider oracle
        fn use context oci-prod
        fn update context oracle.compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}"
        fn update context api-url "https://functions.${{ secrets.OCI_REGION }}.oci.oraclecloud.com"
        fn update context registry "${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ env.APP_NAME }}"

    - name: 9. Update OCI Function
      run: |
        fn update function ${{ env.APP_NAME }} ${{ env.FUNCTION_NAME }} --image "${{ env.FULL_IMAGE_NAME }}"
