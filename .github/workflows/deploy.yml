
name: Build and Deploy to OCI Functions

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # ===================================================================
    # BLOCK 1: FAIL-FAST AUTHENTICATION SETUP & VERIFICATION
    # All authentication and tooling setup happens here first.
    # ===================================================================
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Set up OCI CLI Config and Verify Private Key
      run: |
        mkdir -p ~/.oci
        # Use 'echo -n' to prevent a trailing newline from corrupting the key
        echo -n "${{ secrets.OCI_PRIVATE_KEY }}" | base64 --decode > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem
        
        # VERIFICATION: Use openssl to check the key's integrity. Fails job if invalid.
        echo "Verifying private key integrity..."
        openssl rsa -in ~/.oci/oci_api_key.pem -check -noout
        echo "Private key is valid."
        
        cat <<EOF > ~/.oci/config
        [DEFAULT]
        user=${{ secrets.OCI_USER_OCID }}
        fingerprint=${{ secrets.OCI_FINGERPRINT }}
        tenancy=${{ secrets.OCI_TENANCY_OCID }}
        region=${{ secrets.OCI_REGION }}
        key_file=~/.oci/oci_api_key.pem
        EOF

    - name: 3. Set up Go and Build Fn CLI from source
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    - run: |
        git clone https://github.com/fnproject/cli.git
        cd cli
        make build
        sudo mv fn /usr/local/bin/
        fn version

    - name: 4. Configure Fn CLI Context
      run: |
        fn create context oci-prod --provider oracle
        fn use context oci-prod
        fn update context oracle.compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}"
        fn update context api-url "https://functions.${{ secrets.OCI_REGION }}.oci.oraclecloud.com"
        # The registry context is needed for the 'fn update' command later
        fn update context registry "${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/rag-app"

    - name: 5. Verify OCI API Authentication (Fail-Fast Check)
      run: |
        echo "Attempting a lightweight API call to verify authentication..."
        fn list apps
        echo "âœ… OCI API authentication successful."

    # ===================================================================
    # BLOCK 2: BUILD & PUSH ARTIFACT
    # This only runs if the authentication block above succeeded.
    # ===================================================================
    - name: 6. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 7. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 8. Parse func.yaml and set Image Name
      id: parse_func
      run: |
        FUNCTION_NAME=$(grep '^name:' func.yaml | awk '{print $2}')
        FUNCTION_VERSION=$(grep '^version:' func.yaml | awk '{print $2}')
        APP_NAME="rag-app"
        
        echo "FUNCTION_NAME=${FUNCTION_NAME}" >> $GITHUB_ENV
        echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
        echo "FULL_IMAGE_NAME=${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/${APP_NAME}/${FUNCTION_NAME}:${FUNCTION_VERSION}" >> $GITHUB_ENV

    - name: 9. Build and push Docker image (Native AMD64)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.FULL_IMAGE_NAME }}

    # ===================================================================
    # BLOCK 3: DEPLOY
    # The final, quick step to update the function with the new image.
    # ===================================================================
    - name: 10. Update OCI Function
      run: |
        echo "Updating function ${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }} with image ${{ env.FULL_IMAGE_NAME }}"
        fn update function ${{ env.APP_NAME }} ${{ env.FUNCTION_NAME }} --image "${{ env.FULL_IMAGE_NAME }}"