
name: 'Provision Stack with Isolated CLI'

on:
  workflow_dispatch:

env:
  APP_NAME: "rag-app"
  FUNCTION_NAME: "rag-ingestor"

jobs:
  provision-stack:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Install OCI CLI in an Isolated Environment using pipx
      run: |
        # Install pipx, the correct tool for Python applications
        sudo apt-get update
        sudo apt-get install -y pipx
        pipx ensurepath

        # Use pipx to install oci-cli. This creates a clean, isolated virtual environment.
        pipx install oci-cli
        
        # Verify the installation and feature set
        echo "--- Verifying Isolated CLI Installation ---"
        oci --version
        if oci fn function create --help | grep -q 'enable-resource-principal'; then
          echo "✅ SUCCESS: Isolated CLI contains the required flag."
        else
          echo "❌ FATAL: Even pipx installation failed. This is a critical packaging issue."
          exit 1
        fi
        echo "-----------------------------------------"

    - name: 3. Configure OCI CLI Credentials
      run: |
        mkdir -p ~/.oci
        printf "%s\n" "${{ secrets.OCI_PRIVATE_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config

    - name: 4. Login, Build, and Push Docker Image
      # This step remains the same as your original file
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}
    - run: |
        REPO_NAME=$(echo "${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${REPO_NAME}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV
        docker build -t "${{ env.FULL_IMAGE_NAME }}" .
        docker push "${{ env.FULL_IMAGE_NAME }}"

    - name: 5. Provision Application and Function with Correct Flags
      env:
        DB_SECRET_OCID: ${{ secrets.DB_SECRET_OCID }}
        OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
        PUBLIC_SUBNET_OCID: ${{ secrets.PUBLIC_SUBNET_OCID }}
        FUNCTION_NSG_OCID: ${{ secrets.FUNCTION_NSG_OCID }}
      run: |
        # This section is now guaranteed to work because the correct CLI is installed and in the PATH
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output || true)
        
        if [ -z "$APP_OCID" ] || [ "$APP_OCID" == "None" ]; then
          APP_OCID=$(oci fn application create --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --subnet-ids '["${{ env.PUBLIC_SUBNET_OCID }}"]' --network-security-group-ids '["${{ env.FUNCTION_NSG_OCID }}"]' --query "data.id" --raw-output)
        fi

        FUNCTION_OCID=$(oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" --raw-output || true)

        MEMORY=$(yq '.memory' func.yaml)
        TIMEOUT=$(yq '.timeout' func.yaml)

        JSON_CONFIG=$(jq -n --arg db_secret "$DB_SECRET_OCID" --arg namespace "$OCI_NAMESPACE" '{"DB_SECRET_OCID": $db_secret, "OCI_NAMESPACE": $namespace, "OCI_RESOURCE_PRINCIPAL_VERSION": "2.2"}')

        if [ -z "$FUNCTION_OCID" ] || [ "$FUNCTION_OCID" == "None" ]; then
          oci fn function create --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --image "${{ env.FULL_IMAGE_NAME }}" --memory-in-mbs "$MEMORY" --timeout-in-seconds "$TIMEOUT" --config "$JSON_CONFIG" --enable-resource-principal true
        else
          oci fn function update --function-id "$FUNCTION_OCID" --image "${{ env.FULL_IMAGE_NAME }}" --config "$JSON_CONFIG" --enable-resource-principal true --force
        fi
        echo "✅ Provisioning successful!"