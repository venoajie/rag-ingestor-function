
name: 'Provision Full Application Stack (Manual)'

on:
  workflow_dispatch:

env:
  APP_NAME: "rag-ingestor"
  FUNCTION_NAME: "rag-ingestor"

jobs:
  provision-stack:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Configure OCI CLI and Fn Project CLI
      run: |
        pip install --upgrade oci-cli
        mkdir -p ~/.oci
        printf "%s\n" "${{ secrets.OCI_PRIVATE_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config
        
        curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh

    - name: 3. Configure Fn Project CLI Context
      run: |
        fn create context oci-context \
          --provider oracle \
          --api-url "https://functions.${{ secrets.OCI_REGION }}.oci.oraclecloud.com" \
          --registry "${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_NAMESPACE }}"
        fn use context oci-context
        fn update context oracle.compartment-id "${{ secrets.OCI_COMPARTMENT_OCID }}"
        
    - name: 4. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    # --- RESTRUCTURED DEPLOYMENT LOGIC ---
    - name: 5. Create or Update OCI Function Application
      run: |
        echo "Checking for existing application '${{ env.APP_NAME }}'..."
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output)
        
        SUBNET_IDS='["${{ secrets.PUBLIC_SUBNET_OCID }}"]'
        NSG_IDS='["${{ secrets.FUNCTION_NSG_OCID }}"]'

        if [ -z "$APP_OCID" ] || [ "$APP_OCID" == "null" ]; then
          echo "Application not found. Creating it with required network configuration..."
          oci fn application create \
            --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} \
            --display-name "${{ env.APP_NAME }}" \
            --subnet-ids "$SUBNET_IDS" \
            --network-security-group-ids "$NSG_IDS"
        else
          echo "Application found. Ensuring network configuration is up-to-date..."
          oci fn application update \
            --application-id "$APP_OCID" \
            --subnet-ids "$SUBNET_IDS" \
            --network-security-group-ids "$NSG_IDS" \
            --force
        fi

    - name: 6. Deploy Function Code
      env:
        DB_SECRET_OCID: ${{ secrets.DB_SECRET_OCID }}
        OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
      run: |
        # Now that the application is guaranteed to exist and be correctly configured,
        # deploy the function into it.
        fn --verbose deploy --app ${{ env.APP_NAME }}
        
        echo "âœ… Provisioning successful!"