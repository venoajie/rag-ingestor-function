
name: 'Provision Full Application Stack (Manual)'

on:
  workflow_dispatch:

env:
  APP_NAME: "app-rag"
  FUNCTION_NAME: "rag-ingestor"
  PRIVATE_SUBNET_NAME: "rag-app-vcn-private-sn"
  PRIVATE_RT_NAME: "rag-app-vcn-private-rt"
  PRIVATE_SL_NAME: "rag-app-vcn-private-sl"

jobs:
  provision-stack:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Configure OCI CLI
      run: |
        pip install --upgrade oci-cli jq
        mkdir -p ~/.oci
        printf "%s\n" "${{ secrets.OCI_PRIVATE_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config
        
    - name: 3. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 4. Build and Push Docker Image
      run: |
        REPO_NAME=$(echo "${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${REPO_NAME}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV
        docker build -t "$IMAGE_TAG" .
        docker push "$IMAGE_TAG"

    # --- NEW: INFRASTRUCTURE PROVISIONING BLOCK ---
    - name: 5. Provision VCN Infrastructure (Idempotent)
      id: infra
      run: |
        # 5.1: Ensure Service Gateway exists
        SG_OCID=$(oci network service-gateway list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --query "data[?\"display-name\"=='rag-app-vcn-sgw'].id | [0]" -r)
        if [ -z "$SG_OCID" ] || [ "$SG_OCID" == "null" ]; then
          echo "Service Gateway not found. Creating..."
          # Note: This command is simplified. A real SG needs a service CIDR label. Assuming one exists.
          # For robustness, we check if ANY SG exists and use it.
          SG_OCID=$(oci network service-gateway list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --query "data[0].id" -r)
          if [ -z "$SG_OCID" ] || [ "$SG_OCID" == "null" ]; then echo "FATAL: No Service Gateway found in VCN. Please create one manually."; exit 1; fi
        fi
        echo "Using Service Gateway: $SG_OCID"

        # 5.2: Ensure Private Route Table exists and is configured
        RT_OCID=$(oci network route-table list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --display-name "${{ env.PRIVATE_RT_NAME }}" --query "data[0].id" -r)
        if [ -z "$RT_OCID" ] || [ "$RT_OCID" == "null" ]; then
          echo "Private Route Table not found. Creating..."
          RT_OCID=$(oci network route-table create --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --display-name "${{ env.PRIVATE_RT_NAME }}" --route-rules '[{"networkEntityId": "'$SG_OCID'", "destination": "all-fra-services-in-oracle-services-network", "destinationType": "SERVICE_CIDR_BLOCK"}]' --query "data.id" -r)
        fi
        echo "Using Route Table: $RT_OCID"
        
        # 5.3: Ensure Private Security List exists and is configured
        SL_OCID=$(oci network security-list list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --display-name "${{ env.PRIVATE_SL_NAME }}" --query "data[0].id" -r)
        if [ -z "$SL_OCID" ] || [ "$SL_OCID" == "null" ]; then
          echo "Private Security List not found. Creating..."
          SL_OCID=$(oci network security-list create --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --display-name "${{ env.PRIVATE_SL_NAME }}" --egress-security-rules '[{"destination": "all-fra-services-in-oracle-services-network", "protocol": "all", "destinationType": "SERVICE_CIDR_BLOCK", "isStateless": false}]' --ingress-security-rules '[]' --query "data.id" -r)
        fi
        echo "Using Security List: $SL_OCID"

        # 5.4: Ensure Private Subnet exists and is configured
        SUBNET_OCID=$(oci network subnet list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --display-name "${{ env.PRIVATE_SUBNET_NAME }}" --query "data[0].id" -r)
        if [ -z "$SUBNET_OCID" ] || [ "$SUBNET_OCID" == "null" ]; then
          echo "Private Subnet not found. Creating..."
          SUBNET_OCID=$(oci network subnet create --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --vcn-id ${{ secrets.VCN_OCID }} --display-name "${{ env.PRIVATE_SUBNET_NAME }}" --cidr-block "${{ secrets.PRIVATE_SUBNET_CIDR }}" --route-table-id "$RT_OCID" --security-list-ids "[\"$SL_OCID\"]" --query "data.id" -r)
        fi
        echo "Using Subnet: $SUBNET_OCID"
        echo "FUNCTION_SUBNET_OCID=$SUBNET_OCID" >> $GITHUB_OUTPUT

    - name: 6. Create or Update OCI Function Application
      run: |
        echo "Checking for existing application '${{ env.APP_NAME }}'..."
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" -r)
        # Use the Subnet OCID generated by the previous step
        SUBNET_IDS='["${{ steps.infra.outputs.FUNCTION_SUBNET_OCID }}"]'
        NSG_IDS='["${{ secrets.FUNCTION_NSG_OCID }}"]' # Assuming NSG is still desired for fine-grained control
        if [ -z "$APP_OCID" ] || [ "$APP_OCID" == "null" ]; then
          echo "Application not found. Creating it in the private subnet..."
          oci fn application create --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --subnet-ids "$SUBNET_IDS" --network-security-group-ids "$NSG_IDS"
        else
          echo "Application found. Ensuring it is in the private subnet..."
          oci fn application update --application-id "$APP_OCID" --subnet-ids "$SUBNET_IDS" --network-security-group-ids "$NSG_IDS" --force
        fi

    - name: 7. Create or Update OCI Function
      env:
        DB_SECRET_OCID: ${{ secrets.DB_SECRET_OCID }}
        OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
      run: |
        echo "Checking for existing function '${{ env.FUNCTION_NAME }}'..."
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" -r)
        FUNCTION_OCID=$(oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" -r)
        JSON_CONFIG=$(jq -n --arg fn_auth "resource_principal" --arg db_secret "$DB_SECRET_OCID" --arg namespace "$OCI_NAMESPACE" '{"FN_AUTH_METHOD": $fn_auth, "DB_SECRET_OCID": $db_secret, "OCI_NAMESPACE": $namespace}')
        if [ -z "$FUNCTION_OCID" ] || [ "$FUNCTION_OCID" == "null" ]; then
          echo "Function not found. Creating it..."
          oci fn function create --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --image "${{ env.FULL_IMAGE_NAME }}" --memory-in-mbs 1024 --timeout-in-seconds 120 --config "$JSON_CONFIG"
        else
          echo "Function found. Updating it..."
          oci fn function update --function-id "$FUNCTION_OCID" --image "${{ env.FULL_IMAGE_NAME }}" --config "$JSON_CONFIG" --force
        fi

    - name: 8. Wait for IAM Propagation
      run: |
        echo "Waiting 60 seconds for IAM service to recognize the new/updated function..."
        sleep 60
        echo "Cooldown complete."