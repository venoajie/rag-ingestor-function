
# This is the definitive deployment script for the rag-ingestor.
# It has been simplified to focus only on deploying the application code,
# assuming the underlying network and parent Application are already provisioned.
name: 'Provision RAG Ingestor (API Key Auth)'

on:
  workflow_dispatch:

env:
  APP_NAME: "app-rag"
  FUNCTION_NAME: "rag-ingestor"

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Configure OCI CLI
      run: |
        pip install oci-cli yq
        mkdir -p ~/.oci
        printf "%s\n" "${{ secrets.OCI_PRIVATE_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config

    - name: 3. Log in to OCIR
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 4. Build and Push Docker Image
      run: |
        IMAGE_TAG="${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV
        docker build -t "${{ env.FULL_IMAGE_NAME }}" .
        docker push "${{ env.FULL_IMAGE_NAME }}"

    - name: 5. Create or Update OCI Function
      env:
        OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
        OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
        OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
        OCI_REGION: ${{ secrets.OCI_REGION }}
        OCI_PRIVATE_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY_CONTENT }}
        DB_SECRET_OCID: ${{ secrets.DB_SECRET_OCID }}
        OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
        TARGET_BUCKET_NAME: ${{ secrets.TARGET_BUCKET_NAME }}
      run: |
        B64_KEY=$(echo "$OCI_PRIVATE_KEY_CONTENT" | base64 -w 0)
        JSON_CONFIG=$(jq -n \
          --arg user_ocid "$OCI_USER_OCID" \
          --arg fingerprint "$OCI_FINGERPRINT" \
          --arg tenancy_ocid "$OCI_TENANCY_OCID" \
          --arg region "$OCI_REGION" \
          --arg b64_key_content "$B64_KEY" \
          --arg db_secret "$DB_SECRET_OCID" \
          --arg namespace "$OCI_NAMESPACE" \
          --arg bucket_name "$TARGET_BUCKET_NAME" \
          '{
            "OCI_USER_OCID": $user_ocid,
            "OCI_FINGERPRINT": $fingerprint,
            "OCI_TENANCY_OCID": $tenancy_ocid,
            "OCI_REGION": $region,
            "OCI_PRIVATE_KEY_B64": $b64_key_content,
            "DB_SECRET_OCID": $db_secret,
            "OCI_NAMESPACE": $namespace,
            "TARGET_BUCKET_NAME": $bucket_name
          }')

        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output)
        FUNCTION_OCID=$(oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" --raw-output || true)
        MEMORY=$(yq '.memory' func.yaml)
        TIMEOUT=$(yq '.timeout' func.yaml)

        if [ -z "$FUNCTION_OCID" ]; then
          oci fn function create --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --image "${{ env.FULL_IMAGE_NAME }}" --memory-in-mbs "$MEMORY" --timeout-in-seconds "$TIMEOUT" --config "$JSON_CONFIG"
        else
          oci fn function update --function-id "$FUNCTION_OCID" --image "${{ env.FULL_IMAGE_NAME }}" --memory-in-mbs "$MEMORY" --timeout-in-seconds "$TIMEOUT" --config "$JSON_CONFIG" --force
        fi