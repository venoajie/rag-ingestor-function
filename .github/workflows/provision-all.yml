
name: 'Provision Full Application Stack (Manual)'

on:
  workflow_dispatch:

env:
  APP_NAME: "rag-app"
  FUNCTION_NAME: "rag-ingestor"

jobs:
  provision-stack:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Configure OCI CLI
      run: |
        pip install --upgrade oci-cli
        mkdir -p ~/.oci
        printf "%s\n" "${{ secrets.OCI_PRIVATE_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config
        
    - name: 3. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 4. Set Image Tag Environment Variable
      run: |
        REPO_NAME=$(echo "${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${REPO_NAME}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV

    - name: 5. Build and Push Docker Image
      run: |
        docker build -t "${{ env.FULL_IMAGE_NAME }}" .
        docker push "${{ env.FULL_IMAGE_NAME }}"

    - name: 6. Provision Application and Function
      env:
        DB_SECRET_OCID: ${{ secrets.DB_SECRET_OCID }}
        OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
        # --- CRITICAL: These secrets must point to your PUBLIC subnet and the function's NSG ---
        PUBLIC_SUBNET_OCID: ${{ secrets.PUBLIC_SUBNET_OCID }}
        FUNCTION_NSG_OCID: ${{ secrets.FUNCTION_NSG_OCID }}
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        
        echo "Checking for existing application '${{ env.APP_NAME }}'..."
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output || true)
        
        if [ -z "$APP_OCID" ] || [ "$APP_OCID" == "None" ]; then
          echo "Application not found. Creating it and linking to the PUBLIC subnet..."
          APP_OCID=$(oci fn application create \
            --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} \
            --display-name "${{ env.APP_NAME }}" \
            --subnet-ids '["${{ env.PUBLIC_SUBNET_OCID }}"]' \
            --network-security-group-ids '["${{ env.FUNCTION_NSG_OCID }}"]' \
            --query "data.id" --raw-output)
          echo "Created Application with OCID: $APP_OCID"
        else
          echo "Found existing Application with OCID: $APP_OCID"
        fi

        echo "Checking for existing function '${{ env.FUNCTION_NAME }}'..."
        FUNCTION_OCID=$(oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" --raw-output || true)

        if ! command -v yq &> /dev/null; then
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
        fi
        MEMORY=$(yq '.memory' func.yaml)
        TIMEOUT=$(yq '.timeout' func.yaml)
        sudo apt-get -qq update && sudo apt-get -qq install -y jq

        # --- FIX: Removed the incorrect OCI_RESOURCE_PRINCIPAL_VERSION key ---
        JSON_CONFIG=$(jq -n \
          --arg db_secret "$DB_SECRET_OCID" \
          --arg namespace "$OCI_NAMESPACE" \
          '{"DB_SECRET_OCID": $db_secret, "OCI_NAMESPACE": $namespace}')

        if [ -z "$FUNCTION_OCID" ] || [ "$FUNCTION_OCID" == "None" ]; then
          echo "Function not found. Creating it..."
          oci fn function create \
            --application-id "$APP_OCID" \
            --display-name "${{ env.FUNCTION_NAME }}" \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --memory-in-mbs "$MEMORY" \
            --timeout-in-seconds "$TIMEOUT" \
            --config "$JSON_CONFIG"
        else
          echo "Function found. Updating it..."
          oci fn function update \
            --function-id "$FUNCTION_OCID" \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --config "$JSON_CONFIG" \
            --force
        fi
        echo "âœ… Provisioning successful!"