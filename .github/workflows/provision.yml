
# This workflow is for manually provisioning or updating the function's infrastructure.
# Run this once initially, or when you need to change memory, timeout, or other core settings.
name: 'Provision Function Infrastructure (Manual)'

on:
  workflow_dispatch:

env:
  APP_NAME: "rag-app"
  FUNCTION_NAME: "rag-ingestor"

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Check out repository
      uses: actions/checkout@v4

    - name: 2. Install yq and Configure OCI CLI
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
        pip install oci-cli
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config

    - name: 3. Log in to OCI Container Registry (OCIR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.OCI_REGION_KEY }}.ocir.io
        username: ${{ secrets.OCIR_USERNAME }}
        password: ${{ secrets.OCIR_AUTH_TOKEN }}

    - name: 4. Set Image Tag Environment Variable
      run: |
        # Note: OCI requires the repository part of the image name to be lowercase.
        REPO_NAME=$(echo "${{ env.APP_NAME }}/${{ env.FUNCTION_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/${REPO_NAME}:${{ github.sha }}"
        echo "FULL_IMAGE_NAME=$IMAGE_TAG" >> $GITHUB_ENV

    - name: 5. Build and Push Docker Image
      run: |
        docker build -t "${{ env.FULL_IMAGE_NAME }}" .
        docker push "${{ env.FULL_IMAGE_NAME }}"

    - name: 6. Create or Update OCI Function
      run: |
        echo "Looking up Application OCID for '${{ env.APP_NAME }}'..."
        # NOTE: This now requires the OCI_COMPARTMENT_OCID secret.
        APP_OCID=$(oci fn application list --compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }} --display-name "${{ env.APP_NAME }}" --query "data[0].id" --raw-output)
        if [ -z "$APP_OCID" ]; then
          echo "FATAL: Application '${{ env.APP_NAME }}' not found in compartment."
          exit 1
        fi
        echo "Found Application OCID: $APP_OCID"

        echo "Looking for existing function '${{ env.FUNCTION_NAME }}'..."
        FUNCTION_OCID=$(oci fn function list --application-id "$APP_OCID" --display-name "${{ env.FUNCTION_NAME }}" --query "data[0].id" --raw-output || true)

        echo "Reading configuration from func.yaml..."
        MEMORY=$(yq '.memory' func.yaml)
        TIMEOUT=$(yq '.timeout' func.yaml)
        # The key contains dots, so it must be quoted for yq
        INVOKE_ENDPOINT=$(yq '.annotations."fn.oci.oracle.com/fn/invokeEndpoint"' func.yaml)
        echo "Found settings: MEMORY=${MEMORY}, TIMEOUT=${TIMEOUT}, ENDPOINT=${INVOKE_ENDPOINT}"

        if [ -z "$FUNCTION_OCID" ]; then
          echo "Function not found. Creating it..."
          oci fn function create \
            --application-id "$APP_OCID" \
            --display-name "${{ env.FUNCTION_NAME }}" \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --memory-in-mbs "$MEMORY" \
            --timeout-in-seconds "$TIMEOUT"
            # NOTE: Annotations like invoke endpoint and resource principal are set via func.yaml on create.
        else
          echo "Function found with OCID $FUNCTION_OCID. Updating it..."
          oci fn function update \
            --function-id "$FUNCTION_OCID" \
            --image "${{ env.FULL_IMAGE_NAME }}" \
            --memory-in-mbs "$MEMORY" \
            --timeout-in-seconds "$TIMEOUT" \
            --force
        fi
        echo "âœ… Provisioning successful!"